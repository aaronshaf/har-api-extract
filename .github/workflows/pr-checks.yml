name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    
    steps:
    - name: Check PR title format
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = context.payload.pull_request.title;
          const pattern = /^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+/;
          
          if (!pattern.test(title)) {
            core.warning(`PR title doesn't follow conventional format: "${title}"`);
            core.info('Expected format: type(scope?): description');
            core.info('Example: feat(auth): add login functionality');
          } else {
            core.info(`✓ PR title follows conventional format: "${title}"`);
          }

  changes-summary:
    name: Generate Changes Summary
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Analyze changes
      id: analyze
      run: |
        echo "## 📊 PR Statistics" > pr-summary.md
        echo "" >> pr-summary.md
        
        # Get changed files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
        echo "- **Files changed:** $CHANGED_FILES" >> pr-summary.md
        
        # Get additions and deletions
        STATS=$(git diff --shortstat origin/${{ github.base_ref }}...HEAD)
        echo "- **Lines:** $STATS" >> pr-summary.md
        
        # List changed file types
        echo "" >> pr-summary.md
        echo "### 📁 Changed Files by Type" >> pr-summary.md
        git diff --name-only origin/${{ github.base_ref }}...HEAD | sed 's/.*\.//' | sort | uniq -c | while read count ext; do
          echo "- .$ext: $count files" >> pr-summary.md
        done
        
        # Check for new dependencies
        if git diff origin/${{ github.base_ref }}...HEAD --name-only | grep -q "package.json"; then
          echo "" >> pr-summary.md
          echo "### 📦 Package.json Changes Detected" >> pr-summary.md
          echo "Please ensure all new dependencies are necessary and secure." >> pr-summary.md
        fi
        
        # Check for test files
        TEST_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -c "test\|spec" || true)
        if [ "$TEST_FILES" -gt 0 ]; then
          echo "" >> pr-summary.md
          echo "### ✅ Test Files Modified: $TEST_FILES" >> pr-summary.md
        else
          echo "" >> pr-summary.md
          echo "### ⚠️ No test files detected in this PR" >> pr-summary.md
        fi
        
        cat pr-summary.md
    
    - name: Comment PR summary
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('pr-summary.md', 'utf8');
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('📊 PR Statistics')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: summary
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
          }

  test-coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: Install dependencies
      run: npm install
    
    - name: Run tests with coverage
      run: |
        # Try to run tests with coverage
        npm test -- --coverage 2>/dev/null || npm test
      continue-on-error: true
    
    - name: Generate coverage badge
      if: success()
      run: |
        echo "Coverage report would be generated here if coverage is configured"

  lighthouse-ci:
    name: Performance Check (Chrome Extension)
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.title, 'chrome') || contains(github.event.pull_request.body, 'extension')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Chrome Extension performance
      run: |
        echo "Checking Chrome Extension bundle size..."
        if [ -d "chrome-extension" ]; then
          du -sh chrome-extension/
          find chrome-extension -name "*.js" -o -name "*.css" | while read file; do
            SIZE=$(wc -c < "$file")
            if [ "$SIZE" -gt 1048576 ]; then
              echo "::warning::Large file detected: $file ($(($SIZE / 1024)) KB)"
            fi
          done
        fi

  auto-merge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    needs: [pr-title, changes-summary, test-coverage]
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Dependabot metadata
      id: metadata
      uses: dependabot/fetch-metadata@v2
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
    
    - name: Auto-merge minor updates
      if: steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor'
      run: gh pr merge --auto --merge "$PR_URL"
      env:
        PR_URL: ${{github.event.pull_request.html_url}}
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}